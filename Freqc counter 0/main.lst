CCS PCM C Compiler, Version 5.049, 5967               07-sept.-23 22:25

               Filename:   C:\Users\Cecilia\Documents\CCS C Projects\Freqc counter 0\main.lst

               ROM used:   1539 words (75%)
                           Largest free fragment is 509
               RAM used:   20 (9%) at main() level
                           45 (20%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4A6
0003:  NOP
.................... #include <16F628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  53
0009:  RETLW  61
000A:  RETLW  6D
000B:  RETLW  70
000C:  RETLW  6C
000D:  RETLW  69
000E:  RETLW  6E
000F:  RETLW  67
0010:  RETLW  21
0011:  RETLW  21
0012:  RETLW  21
0013:  RETLW  21
0014:  RETLW  21
0015:  RETLW  21
0016:  RETLW  00
0017:  BCF    0A.0
0018:  BCF    0A.1
0019:  BCF    0A.2
001A:  ADDWF  02,F
001B:  RETLW  46
001C:  RETLW  72
001D:  RETLW  65
001E:  RETLW  71
001F:  RETLW  75
0020:  RETLW  65
0021:  RETLW  6E
0022:  RETLW  63
0023:  RETLW  65
0024:  RETLW  20
0025:  RETLW  3D
0026:  RETLW  00
0027:  BCF    0A.0
0028:  BCF    0A.1
0029:  BCF    0A.2
002A:  ADDWF  02,F
002B:  RETLW  5A
002C:  RETLW  65
002D:  RETLW  72
002E:  RETLW  6F
002F:  RETLW  20
0030:  RETLW  53
0031:  RETLW  69
0032:  RETLW  67
0033:  RETLW  6E
0034:  RETLW  61
0035:  RETLW  6C
0036:  RETLW  00
0037:  BCF    0A.0
0038:  BCF    0A.1
0039:  BCF    0A.2
003A:  ADDWF  02,F
003B:  RETLW  20
003C:  RETLW  25
003D:  RETLW  4C
003E:  RETLW  55
003F:  RETLW  20
0040:  RETLW  48
0041:  RETLW  7A
0042:  RETLW  20
0043:  RETLW  20
0044:  RETLW  20
0045:  RETLW  20
0046:  RETLW  20
0047:  RETLW  20
0048:  RETLW  00
0049:  BCF    0A.0
004A:  BCF    0A.1
004B:  BCF    0A.2
004C:  ADDWF  02,F
004D:  RETLW  20
004E:  RETLW  25
004F:  RETLW  33
0050:  RETLW  2E
0051:  RETLW  33
0052:  RETLW  66
0053:  RETLW  20
0054:  RETLW  6B
0055:  RETLW  48
0056:  RETLW  7A
0057:  RETLW  20
0058:  RETLW  20
0059:  RETLW  20
005A:  RETLW  20
005B:  RETLW  20
005C:  RETLW  20
005D:  RETLW  20
005E:  RETLW  00
005F:  BCF    0A.0
0060:  BCF    0A.1
0061:  BCF    0A.2
0062:  ADDWF  02,F
0063:  RETLW  20
0064:  RETLW  25
0065:  RETLW  33
0066:  RETLW  2E
0067:  RETLW  33
0068:  RETLW  66
0069:  RETLW  20
006A:  RETLW  4D
006B:  RETLW  48
006C:  RETLW  7A
006D:  RETLW  20
006E:  RETLW  20
006F:  RETLW  20
0070:  RETLW  20
0071:  RETLW  20
0072:  RETLW  20
0073:  RETLW  20
0074:  RETLW  00
*
01C8:  BTFSC  03.1
01C9:  GOTO   1CD
01CA:  MOVLW  44
01CB:  MOVWF  04
01CC:  BCF    03.7
01CD:  CLRF   77
01CE:  CLRF   78
01CF:  CLRF   79
01D0:  CLRF   7A
01D1:  CLRF   44
01D2:  CLRF   45
01D3:  CLRF   46
01D4:  CLRF   47
01D5:  MOVF   43,W
01D6:  IORWF  42,W
01D7:  IORWF  41,W
01D8:  IORWF  40,W
01D9:  BTFSC  03.2
01DA:  GOTO   20B
01DB:  MOVLW  20
01DC:  MOVWF  48
01DD:  BCF    03.0
01DE:  RLF    3C,F
01DF:  RLF    3D,F
01E0:  RLF    3E,F
01E1:  RLF    3F,F
01E2:  RLF    44,F
01E3:  RLF    45,F
01E4:  RLF    46,F
01E5:  RLF    47,F
01E6:  MOVF   43,W
01E7:  SUBWF  47,W
01E8:  BTFSS  03.2
01E9:  GOTO   1F4
01EA:  MOVF   42,W
01EB:  SUBWF  46,W
01EC:  BTFSS  03.2
01ED:  GOTO   1F4
01EE:  MOVF   41,W
01EF:  SUBWF  45,W
01F0:  BTFSS  03.2
01F1:  GOTO   1F4
01F2:  MOVF   40,W
01F3:  SUBWF  44,W
01F4:  BTFSS  03.0
01F5:  GOTO   205
01F6:  MOVF   40,W
01F7:  SUBWF  44,F
01F8:  MOVF   41,W
01F9:  BTFSS  03.0
01FA:  INCFSZ 41,W
01FB:  SUBWF  45,F
01FC:  MOVF   42,W
01FD:  BTFSS  03.0
01FE:  INCFSZ 42,W
01FF:  SUBWF  46,F
0200:  MOVF   43,W
0201:  BTFSS  03.0
0202:  INCFSZ 43,W
0203:  SUBWF  47,F
0204:  BSF    03.0
0205:  RLF    77,F
0206:  RLF    78,F
0207:  RLF    79,F
0208:  RLF    7A,F
0209:  DECFSZ 48,F
020A:  GOTO   1DD
020B:  MOVF   44,W
020C:  MOVWF  00
020D:  INCF   04,F
020E:  MOVF   45,W
020F:  MOVWF  00
0210:  INCF   04,F
0211:  MOVF   46,W
0212:  MOVWF  00
0213:  INCF   04,F
0214:  MOVF   47,W
0215:  MOVWF  00
0216:  RETURN
0217:  MOVF   04,W
0218:  MOVWF  2F
0219:  MOVLW  3B
021A:  MOVWF  36
021B:  MOVLW  9A
021C:  MOVWF  35
021D:  MOVLW  CA
021E:  MOVWF  34
021F:  CLRF   33
0220:  MOVLW  0A
0221:  MOVWF  31
0222:  BSF    03.1
0223:  MOVLW  2B
0224:  MOVWF  04
0225:  BCF    03.7
0226:  MOVF   2E,W
0227:  MOVWF  3F
0228:  MOVF   2D,W
0229:  MOVWF  3E
022A:  MOVF   2C,W
022B:  MOVWF  3D
022C:  MOVF   2B,W
022D:  MOVWF  3C
022E:  MOVF   36,W
022F:  MOVWF  43
0230:  MOVF   35,W
0231:  MOVWF  42
0232:  MOVF   34,W
0233:  MOVWF  41
0234:  MOVF   33,W
0235:  MOVWF  40
0236:  CALL   1C8
0237:  MOVF   78,W
0238:  MOVF   77,F
0239:  BTFSS  03.2
023A:  GOTO   24E
023B:  MOVF   31,W
023C:  XORLW  01
023D:  BTFSC  03.2
023E:  GOTO   24E
023F:  MOVF   2F,W
0240:  BTFSC  03.2
0241:  GOTO   24F
0242:  ANDLW  0F
0243:  SUBWF  31,W
0244:  BTFSC  03.2
0245:  GOTO   248
0246:  BTFSC  03.0
0247:  GOTO   254
0248:  BTFSC  2F.7
0249:  GOTO   254
024A:  BTFSC  2F.6
024B:  GOTO   24F
024C:  MOVLW  20
024D:  GOTO   250
024E:  CLRF   2F
024F:  MOVLW  30
0250:  ADDWF  77,F
0251:  MOVF   77,W
0252:  MOVWF  3C
0253:  CALL   19C
0254:  BCF    03.1
0255:  MOVF   36,W
0256:  MOVWF  3F
0257:  MOVF   35,W
0258:  MOVWF  3E
0259:  MOVF   34,W
025A:  MOVWF  3D
025B:  MOVF   33,W
025C:  MOVWF  3C
025D:  CLRF   43
025E:  CLRF   42
025F:  CLRF   41
0260:  MOVLW  0A
0261:  MOVWF  40
0262:  CALL   1C8
0263:  MOVF   7A,W
0264:  MOVWF  36
0265:  MOVF   79,W
0266:  MOVWF  35
0267:  MOVF   78,W
0268:  MOVWF  34
0269:  MOVF   77,W
026A:  MOVWF  33
026B:  DECFSZ 31,F
026C:  GOTO   222
026D:  GOTO   550 (RETURN)
026E:  MOVLW  B6
026F:  MOVWF  77
0270:  CLRF   7A
0271:  CLRF   79
0272:  CLRF   78
0273:  MOVF   2B,W
0274:  IORWF  2C,W
0275:  IORWF  2D,W
0276:  IORWF  2E,W
0277:  BTFSS  03.2
0278:  GOTO   27B
0279:  CLRF   77
027A:  GOTO   288
027B:  BCF    03.0
027C:  BTFSC  78.7
027D:  GOTO   287
027E:  RLF    2B,F
027F:  RLF    2C,F
0280:  RLF    2D,F
0281:  RLF    2E,F
0282:  RLF    7A,F
0283:  RLF    79,F
0284:  RLF    78,F
0285:  DECFSZ 77,F
0286:  GOTO   27B
0287:  BCF    78.7
0288:  RETURN
0289:  MOVF   2F,W
028A:  BTFSC  03.2
028B:  GOTO   34E
028C:  MOVWF  3B
028D:  MOVF   33,W
028E:  BTFSC  03.2
028F:  GOTO   34E
0290:  SUBWF  3B,F
0291:  BTFSS  03.0
0292:  GOTO   298
0293:  MOVLW  7F
0294:  ADDWF  3B,F
0295:  BTFSC  03.0
0296:  GOTO   34E
0297:  GOTO   29E
0298:  MOVLW  81
0299:  SUBWF  3B,F
029A:  BTFSS  03.0
029B:  GOTO   34E
029C:  BTFSC  03.2
029D:  GOTO   34E
029E:  MOVF   3B,W
029F:  MOVWF  77
02A0:  CLRF   78
02A1:  CLRF   79
02A2:  CLRF   7A
02A3:  CLRF   3A
02A4:  MOVF   30,W
02A5:  MOVWF  39
02A6:  BSF    39.7
02A7:  MOVF   31,W
02A8:  MOVWF  38
02A9:  MOVF   32,W
02AA:  MOVWF  37
02AB:  MOVLW  19
02AC:  MOVWF  3B
02AD:  MOVF   36,W
02AE:  SUBWF  37,F
02AF:  BTFSC  03.0
02B0:  GOTO   2C1
02B1:  MOVLW  01
02B2:  SUBWF  38,F
02B3:  BTFSC  03.0
02B4:  GOTO   2C1
02B5:  SUBWF  39,F
02B6:  BTFSC  03.0
02B7:  GOTO   2C1
02B8:  SUBWF  3A,F
02B9:  BTFSC  03.0
02BA:  GOTO   2C1
02BB:  INCF   3A,F
02BC:  INCF   39,F
02BD:  INCF   38,F
02BE:  MOVF   36,W
02BF:  ADDWF  37,F
02C0:  GOTO   2F3
02C1:  MOVF   35,W
02C2:  SUBWF  38,F
02C3:  BTFSC  03.0
02C4:  GOTO   2DC
02C5:  MOVLW  01
02C6:  SUBWF  39,F
02C7:  BTFSC  03.0
02C8:  GOTO   2DC
02C9:  SUBWF  3A,F
02CA:  BTFSC  03.0
02CB:  GOTO   2DC
02CC:  INCF   3A,F
02CD:  INCF   39,F
02CE:  MOVF   35,W
02CF:  ADDWF  38,F
02D0:  MOVF   36,W
02D1:  ADDWF  37,F
02D2:  BTFSS  03.0
02D3:  GOTO   2F3
02D4:  INCF   38,F
02D5:  BTFSS  03.2
02D6:  GOTO   2F3
02D7:  INCF   39,F
02D8:  BTFSS  03.2
02D9:  GOTO   2F3
02DA:  INCF   3A,F
02DB:  GOTO   2F3
02DC:  MOVF   34,W
02DD:  IORLW  80
02DE:  SUBWF  39,F
02DF:  BTFSC  03.0
02E0:  GOTO   2F2
02E1:  MOVLW  01
02E2:  SUBWF  3A,F
02E3:  BTFSC  03.0
02E4:  GOTO   2F2
02E5:  INCF   3A,F
02E6:  MOVF   34,W
02E7:  IORLW  80
02E8:  ADDWF  39,F
02E9:  MOVF   35,W
02EA:  ADDWF  38,F
02EB:  BTFSS  03.0
02EC:  GOTO   2D0
02ED:  INCF   39,F
02EE:  BTFSS  03.2
02EF:  GOTO   2D0
02F0:  INCF   3A,F
02F1:  GOTO   2D0
02F2:  BSF    7A.0
02F3:  DECFSZ 3B,F
02F4:  GOTO   2F6
02F5:  GOTO   301
02F6:  BCF    03.0
02F7:  RLF    37,F
02F8:  RLF    38,F
02F9:  RLF    39,F
02FA:  RLF    3A,F
02FB:  BCF    03.0
02FC:  RLF    7A,F
02FD:  RLF    79,F
02FE:  RLF    78,F
02FF:  RLF    3C,F
0300:  GOTO   2AD
0301:  BTFSS  3C.0
0302:  GOTO   309
0303:  BCF    03.0
0304:  RRF    78,F
0305:  RRF    79,F
0306:  RRF    7A,F
0307:  RRF    3C,F
0308:  GOTO   30C
0309:  DECF   77,F
030A:  BTFSC  03.2
030B:  GOTO   34E
030C:  BTFSC  3C.7
030D:  GOTO   335
030E:  BCF    03.0
030F:  RLF    37,F
0310:  RLF    38,F
0311:  RLF    39,F
0312:  RLF    3A,F
0313:  MOVF   36,W
0314:  SUBWF  37,F
0315:  BTFSC  03.0
0316:  GOTO   321
0317:  MOVLW  01
0318:  SUBWF  38,F
0319:  BTFSC  03.0
031A:  GOTO   321
031B:  SUBWF  39,F
031C:  BTFSC  03.0
031D:  GOTO   321
031E:  SUBWF  3A,F
031F:  BTFSS  03.0
0320:  GOTO   344
0321:  MOVF   35,W
0322:  SUBWF  38,F
0323:  BTFSC  03.0
0324:  GOTO   32C
0325:  MOVLW  01
0326:  SUBWF  39,F
0327:  BTFSC  03.0
0328:  GOTO   32C
0329:  SUBWF  3A,F
032A:  BTFSS  03.0
032B:  GOTO   344
032C:  MOVF   34,W
032D:  IORLW  80
032E:  SUBWF  39,F
032F:  BTFSC  03.0
0330:  GOTO   335
0331:  MOVLW  01
0332:  SUBWF  3A,F
0333:  BTFSS  03.0
0334:  GOTO   344
0335:  INCF   7A,F
0336:  BTFSS  03.2
0337:  GOTO   344
0338:  INCF   79,F
0339:  BTFSS  03.2
033A:  GOTO   344
033B:  INCF   78,F
033C:  BTFSS  03.2
033D:  GOTO   344
033E:  INCF   77,F
033F:  BTFSC  03.2
0340:  GOTO   34E
0341:  RRF    78,F
0342:  RRF    79,F
0343:  RRF    7A,F
0344:  MOVF   30,W
0345:  MOVWF  3B
0346:  MOVF   34,W
0347:  XORWF  3B,F
0348:  BTFSS  3B.7
0349:  GOTO   34C
034A:  BSF    78.7
034B:  GOTO   352
034C:  BCF    78.7
034D:  GOTO   352
034E:  CLRF   77
034F:  CLRF   78
0350:  CLRF   79
0351:  CLRF   7A
0352:  RETURN
0353:  MOVF   04,W
0354:  MOVWF  34
0355:  MOVF   33,W
0356:  MOVWF  36
0357:  BTFSC  03.2
0358:  GOTO   3E5
0359:  MOVF   32,W
035A:  MOVWF  3F
035B:  MOVF   31,W
035C:  MOVWF  3E
035D:  MOVF   30,W
035E:  MOVWF  3D
035F:  MOVF   2F,W
0360:  MOVWF  3C
0361:  CLRF   43
0362:  CLRF   42
0363:  MOVLW  20
0364:  MOVWF  41
0365:  MOVLW  82
0366:  MOVWF  40
0367:  MOVF   3C,W
0368:  BTFSC  03.2
0369:  GOTO   3D7
036A:  MOVWF  44
036B:  MOVF   40,W
036C:  BTFSC  03.2
036D:  GOTO   3D7
036E:  ADDWF  44,F
036F:  BTFSC  03.0
0370:  GOTO   378
0371:  MOVLW  7F
0372:  SUBWF  44,F
0373:  BTFSS  03.0
0374:  GOTO   3D7
0375:  BTFSC  03.2
0376:  GOTO   3D7
0377:  GOTO   37C
0378:  MOVLW  81
0379:  ADDWF  44,F
037A:  BTFSC  03.0
037B:  GOTO   3D7
037C:  MOVF   44,W
037D:  MOVWF  77
037E:  CLRF   78
037F:  CLRF   79
0380:  CLRF   7A
0381:  MOVF   3D,W
0382:  MOVWF  48
0383:  BSF    48.7
0384:  MOVF   3E,W
0385:  MOVWF  47
0386:  MOVF   3F,W
0387:  MOVWF  46
0388:  MOVLW  18
0389:  MOVWF  44
038A:  CLRF   45
038B:  BTFSS  46.0
038C:  GOTO   3A5
038D:  MOVF   43,W
038E:  ADDWF  7A,F
038F:  BTFSS  03.0
0390:  GOTO   397
0391:  INCF   79,F
0392:  BTFSS  03.2
0393:  GOTO   397
0394:  INCF   78,F
0395:  BTFSC  03.2
0396:  BSF    45.7
0397:  MOVF   42,W
0398:  ADDWF  79,F
0399:  BTFSS  03.0
039A:  GOTO   39E
039B:  INCF   78,F
039C:  BTFSC  03.2
039D:  BSF    45.7
039E:  MOVF   41,W
039F:  MOVWF  3E
03A0:  BSF    3E.7
03A1:  MOVF   3E,W
03A2:  ADDWF  78,F
03A3:  BTFSC  03.0
03A4:  BSF    45.7
03A5:  RLF    45,F
03A6:  RRF    78,F
03A7:  RRF    79,F
03A8:  RRF    7A,F
03A9:  RRF    48,F
03AA:  RRF    47,F
03AB:  RRF    46,F
03AC:  BCF    03.0
03AD:  DECFSZ 44,F
03AE:  GOTO   38A
03AF:  MOVLW  01
03B0:  ADDWF  77,F
03B1:  BTFSC  03.0
03B2:  GOTO   3D7
03B3:  BTFSC  78.7
03B4:  GOTO   3BC
03B5:  RLF    48,F
03B6:  RLF    7A,F
03B7:  RLF    79,F
03B8:  RLF    78,F
03B9:  DECF   77,F
03BA:  BTFSC  03.2
03BB:  GOTO   3D7
03BC:  BTFSS  48.7
03BD:  GOTO   3CD
03BE:  INCF   7A,F
03BF:  BTFSS  03.2
03C0:  GOTO   3CD
03C1:  INCF   79,F
03C2:  BTFSS  03.2
03C3:  GOTO   3CD
03C4:  INCF   78,F
03C5:  BTFSS  03.2
03C6:  GOTO   3CD
03C7:  RRF    78,F
03C8:  RRF    79,F
03C9:  RRF    7A,F
03CA:  INCF   77,F
03CB:  BTFSC  03.2
03CC:  GOTO   3D7
03CD:  MOVF   3D,W
03CE:  MOVWF  45
03CF:  MOVF   41,W
03D0:  XORWF  45,F
03D1:  BTFSS  45.7
03D2:  GOTO   3D5
03D3:  BSF    78.7
03D4:  GOTO   3DB
03D5:  BCF    78.7
03D6:  GOTO   3DB
03D7:  CLRF   77
03D8:  CLRF   78
03D9:  CLRF   79
03DA:  CLRF   7A
03DB:  MOVF   7A,W
03DC:  MOVWF  32
03DD:  MOVF   79,W
03DE:  MOVWF  31
03DF:  MOVF   78,W
03E0:  MOVWF  30
03E1:  MOVF   77,W
03E2:  MOVWF  2F
03E3:  DECFSZ 36,F
03E4:  GOTO   359
03E5:  MOVF   32,W
03E6:  MOVWF  3F
03E7:  MOVF   31,W
03E8:  MOVWF  3E
03E9:  MOVF   30,W
03EA:  MOVWF  3D
03EB:  MOVF   2F,W
03EC:  MOVWF  3C
03ED:  MOVF   3C,W
03EE:  SUBLW  B6
03EF:  MOVWF  3C
03F0:  CLRF   7A
03F1:  MOVF   3D,W
03F2:  MOVWF  40
03F3:  BSF    3D.7
03F4:  BCF    03.0
03F5:  RRF    3D,F
03F6:  RRF    3E,F
03F7:  RRF    3F,F
03F8:  RRF    7A,F
03F9:  RRF    79,F
03FA:  RRF    78,F
03FB:  RRF    77,F
03FC:  DECFSZ 3C,F
03FD:  GOTO   3F4
03FE:  BTFSS  40.7
03FF:  GOTO   40B
0400:  COMF   77,F
0401:  COMF   78,F
0402:  COMF   79,F
0403:  COMF   7A,F
0404:  INCF   77,F
0405:  BTFSC  03.2
0406:  INCF   78,F
0407:  BTFSC  03.2
0408:  INCF   79,F
0409:  BTFSC  03.2
040A:  INCF   7A,F
040B:  MOVF   7A,W
040C:  MOVWF  32
040D:  MOVF   79,W
040E:  MOVWF  31
040F:  MOVF   78,W
0410:  MOVWF  30
0411:  MOVF   77,W
0412:  MOVWF  2F
0413:  BTFSS  32.7
0414:  GOTO   422
0415:  DECF   34,F
0416:  BSF    34.5
0417:  COMF   2F,F
0418:  COMF   30,F
0419:  COMF   31,F
041A:  COMF   32,F
041B:  INCF   2F,F
041C:  BTFSC  03.2
041D:  INCF   30,F
041E:  BTFSC  03.2
041F:  INCF   31,F
0420:  BTFSC  03.2
0421:  INCF   32,F
0422:  MOVLW  3B
0423:  MOVWF  3B
0424:  MOVLW  9A
0425:  MOVWF  3A
0426:  MOVLW  CA
0427:  MOVWF  39
0428:  CLRF   38
0429:  MOVLW  0A
042A:  MOVWF  36
042B:  MOVF   33,W
042C:  BTFSC  03.2
042D:  INCF   34,F
042E:  BSF    03.1
042F:  MOVLW  2F
0430:  MOVWF  04
0431:  BCF    03.7
0432:  MOVF   32,W
0433:  MOVWF  3F
0434:  MOVF   31,W
0435:  MOVWF  3E
0436:  MOVF   30,W
0437:  MOVWF  3D
0438:  MOVF   2F,W
0439:  MOVWF  3C
043A:  MOVF   3B,W
043B:  MOVWF  43
043C:  MOVF   3A,W
043D:  MOVWF  42
043E:  MOVF   39,W
043F:  MOVWF  41
0440:  MOVF   38,W
0441:  MOVWF  40
0442:  CALL   1C8
0443:  MOVF   78,W
0444:  MOVF   77,F
0445:  BTFSS  03.2
0446:  GOTO   45A
0447:  INCF   33,W
0448:  SUBWF  36,W
0449:  BTFSC  03.2
044A:  GOTO   45A
044B:  MOVF   34,W
044C:  BTFSC  03.2
044D:  GOTO   45C
044E:  ANDLW  0F
044F:  SUBWF  36,W
0450:  BTFSC  03.2
0451:  GOTO   454
0452:  BTFSC  03.0
0453:  GOTO   48C
0454:  BTFSC  34.7
0455:  GOTO   48C
0456:  BTFSC  34.6
0457:  GOTO   45C
0458:  MOVLW  20
0459:  GOTO   488
045A:  MOVLW  20
045B:  ANDWF  34,F
045C:  BTFSS  34.5
045D:  GOTO   46A
045E:  BCF    34.5
045F:  MOVF   33,W
0460:  BTFSS  03.2
0461:  DECF   34,F
0462:  MOVF   77,W
0463:  MOVWF  34
0464:  MOVLW  2D
0465:  MOVWF  3C
0466:  CALL   19C
0467:  MOVF   34,W
0468:  MOVWF  77
0469:  CLRF   34
046A:  MOVF   33,W
046B:  SUBWF  36,W
046C:  BTFSS  03.2
046D:  GOTO   478
046E:  MOVF   77,W
046F:  MOVWF  34
0470:  MOVLW  2E
0471:  MOVWF  3C
0472:  CALL   19C
0473:  MOVF   34,W
0474:  MOVWF  77
0475:  MOVLW  20
0476:  ANDWF  34,F
0477:  MOVLW  00
0478:  MOVLW  30
0479:  BTFSS  34.5
047A:  GOTO   488
047B:  BCF    34.5
047C:  MOVF   33,W
047D:  BTFSS  03.2
047E:  DECF   34,F
047F:  MOVF   77,W
0480:  MOVWF  34
0481:  MOVLW  2D
0482:  MOVWF  3C
0483:  CALL   19C
0484:  MOVF   34,W
0485:  MOVWF  77
0486:  CLRF   34
0487:  MOVLW  30
0488:  ADDWF  77,F
0489:  MOVF   77,W
048A:  MOVWF  3C
048B:  CALL   19C
048C:  BCF    03.1
048D:  MOVF   3B,W
048E:  MOVWF  3F
048F:  MOVF   3A,W
0490:  MOVWF  3E
0491:  MOVF   39,W
0492:  MOVWF  3D
0493:  MOVF   38,W
0494:  MOVWF  3C
0495:  CLRF   43
0496:  CLRF   42
0497:  CLRF   41
0498:  MOVLW  0A
0499:  MOVWF  40
049A:  CALL   1C8
049B:  MOVF   7A,W
049C:  MOVWF  3B
049D:  MOVF   79,W
049E:  MOVWF  3A
049F:  MOVF   78,W
04A0:  MOVWF  39
04A1:  MOVF   77,W
04A2:  MOVWF  38
04A3:  DECFSZ 36,F
04A4:  GOTO   42E
04A5:  RETURN
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT 
.................... #use delay(clock=20000000)     
*
0075:  MOVLW  3D
0076:  MOVWF  04
0077:  BCF    03.7
0078:  MOVF   00,W
0079:  BTFSC  03.2
007A:  GOTO   088
007B:  MOVLW  06
007C:  MOVWF  78
007D:  CLRF   77
007E:  DECFSZ 77,F
007F:  GOTO   07E
0080:  DECFSZ 78,F
0081:  GOTO   07D
0082:  MOVLW  7B
0083:  MOVWF  77
0084:  DECFSZ 77,F
0085:  GOTO   084
0086:  DECFSZ 00,F
0087:  GOTO   07B
0088:  RETURN
.................... //one instruction=0.2us 
.................... #bit t1_overflow=0x0C.0 
....................  
.................... #define LCD_ENABLE_PIN  PIN_B2                                         
.................... #define LCD_RS_PIN      PIN_B0                                         
.................... #define LCD_RW_PIN      PIN_B1  
....................  
.................... #define LCD_DATA4       PIN_B3                                        
.................... #define LCD_DATA5       PIN_B4                                        
.................... #define LCD_DATA6       PIN_B5                                         
.................... #define LCD_DATA7       PIN_B7                                     
....................  
....................  
.................... #include<LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00F0:  BSF    06.3
....................    output_float(LCD_DATA5); 
00F1:  BSF    06.4
....................    output_float(LCD_DATA6); 
00F2:  BSF    06.5
....................    output_float(LCD_DATA7); 
00F3:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00F4:  BCF    03.5
00F5:  BSF    06.1
00F6:  BSF    03.5
00F7:  BCF    06.1
....................    delay_cycles(1); 
00F8:  NOP
....................    lcd_output_enable(1); 
00F9:  BCF    03.5
00FA:  BSF    06.2
00FB:  BSF    03.5
00FC:  BCF    06.2
....................    delay_cycles(1); 
00FD:  NOP
....................    high = lcd_read_nibble(); 
00FE:  BCF    03.5
00FF:  CALL   0B7
0100:  MOVF   78,W
0101:  MOVWF  44
....................        
....................    lcd_output_enable(0); 
0102:  BCF    06.2
0103:  BSF    03.5
0104:  BCF    06.2
....................    delay_cycles(1); 
0105:  NOP
....................    lcd_output_enable(1); 
0106:  BCF    03.5
0107:  BSF    06.2
0108:  BSF    03.5
0109:  BCF    06.2
....................    delay_us(1); 
010A:  GOTO   10B
010B:  GOTO   10C
010C:  NOP
....................    low = lcd_read_nibble(); 
010D:  BCF    03.5
010E:  CALL   0B7
010F:  MOVF   78,W
0110:  MOVWF  43
....................        
....................    lcd_output_enable(0); 
0111:  BCF    06.2
0112:  BSF    03.5
0113:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0114:  BCF    06.3
....................    output_drive(LCD_DATA5); 
0115:  BCF    06.4
....................    output_drive(LCD_DATA6); 
0116:  BCF    06.5
....................    output_drive(LCD_DATA7); 
0117:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0118:  BCF    03.5
0119:  SWAPF  44,W
011A:  MOVWF  77
011B:  MOVLW  F0
011C:  ANDWF  77,F
011D:  MOVF   77,W
011E:  IORWF  43,W
011F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00B7:  CLRF   45
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00B8:  BSF    03.5
00B9:  BSF    06.3
00BA:  MOVLW  00
00BB:  BCF    03.5
00BC:  BTFSC  06.3
00BD:  MOVLW  01
00BE:  IORWF  45,F
....................    n |= input(LCD_DATA5) << 1; 
00BF:  BSF    03.5
00C0:  BSF    06.4
00C1:  MOVLW  00
00C2:  BCF    03.5
00C3:  BTFSC  06.4
00C4:  MOVLW  01
00C5:  MOVWF  77
00C6:  BCF    03.0
00C7:  RLF    77,F
00C8:  MOVF   77,W
00C9:  IORWF  45,F
....................    n |= input(LCD_DATA6) << 2; 
00CA:  BSF    03.5
00CB:  BSF    06.5
00CC:  MOVLW  00
00CD:  BCF    03.5
00CE:  BTFSC  06.5
00CF:  MOVLW  01
00D0:  MOVWF  77
00D1:  RLF    77,F
00D2:  RLF    77,F
00D3:  MOVLW  FC
00D4:  ANDWF  77,F
00D5:  MOVF   77,W
00D6:  IORWF  45,F
....................    n |= input(LCD_DATA7) << 3; 
00D7:  BSF    03.5
00D8:  BSF    06.7
00D9:  MOVLW  00
00DA:  BCF    03.5
00DB:  BTFSC  06.7
00DC:  MOVLW  01
00DD:  MOVWF  77
00DE:  RLF    77,F
00DF:  RLF    77,F
00E0:  RLF    77,F
00E1:  MOVLW  F8
00E2:  ANDWF  77,F
00E3:  MOVF   77,W
00E4:  IORWF  45,F
....................     
....................    return(n); 
00E5:  MOVF   45,W
00E6:  MOVWF  78
....................   #else 
00E7:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0089:  BTFSC  44.0
008A:  GOTO   08D
008B:  BCF    06.3
008C:  GOTO   08E
008D:  BSF    06.3
008E:  BSF    03.5
008F:  BCF    06.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0090:  BCF    03.5
0091:  BTFSC  44.1
0092:  GOTO   095
0093:  BCF    06.4
0094:  GOTO   096
0095:  BSF    06.4
0096:  BSF    03.5
0097:  BCF    06.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0098:  BCF    03.5
0099:  BTFSC  44.2
009A:  GOTO   09D
009B:  BCF    06.5
009C:  GOTO   09E
009D:  BSF    06.5
009E:  BSF    03.5
009F:  BCF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00A0:  BCF    03.5
00A1:  BTFSC  44.3
00A2:  GOTO   0A5
00A3:  BCF    06.7
00A4:  GOTO   0A6
00A5:  BSF    06.7
00A6:  BSF    03.5
00A7:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00A8:  NOP
....................    lcd_output_enable(1); 
00A9:  BCF    03.5
00AA:  BSF    06.2
00AB:  BSF    03.5
00AC:  BCF    06.2
....................    delay_us(2); 
00AD:  MOVLW  03
00AE:  MOVWF  77
00AF:  DECFSZ 77,F
00B0:  GOTO   0AF
....................    lcd_output_enable(0); 
00B1:  BCF    03.5
00B2:  BCF    06.2
00B3:  BSF    03.5
00B4:  BCF    06.2
00B5:  BCF    03.5
00B6:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00E8:  BSF    03.5
00E9:  BCF    06.2
....................    lcd_rs_tris(); 
00EA:  BCF    06.0
....................    lcd_rw_tris(); 
00EB:  BCF    06.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00EC:  BCF    03.5
00ED:  BCF    06.0
00EE:  BSF    03.5
00EF:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0120:  MOVF   78,W
0121:  MOVWF  43
0122:  BTFSS  43.7
0123:  GOTO   126
0124:  BSF    03.5
0125:  GOTO   0F0
....................    lcd_output_rs(address); 
0126:  MOVF   41,F
0127:  BTFSS  03.2
0128:  GOTO   12B
0129:  BCF    06.0
012A:  GOTO   12C
012B:  BSF    06.0
012C:  BSF    03.5
012D:  BCF    06.0
....................    delay_cycles(1); 
012E:  NOP
....................    lcd_output_rw(0); 
012F:  BCF    03.5
0130:  BCF    06.1
0131:  BSF    03.5
0132:  BCF    06.1
....................    delay_cycles(1); 
0133:  NOP
....................    lcd_output_enable(0); 
0134:  BCF    03.5
0135:  BCF    06.2
0136:  BSF    03.5
0137:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
0138:  BCF    03.5
0139:  SWAPF  42,W
013A:  MOVWF  43
013B:  MOVLW  0F
013C:  ANDWF  43,F
013D:  MOVF   43,W
013E:  MOVWF  44
013F:  CALL   089
....................    lcd_send_nibble(n & 0xf); 
0140:  MOVF   42,W
0141:  ANDLW  0F
0142:  MOVWF  43
0143:  MOVWF  44
0144:  CALL   089
0145:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0146:  MOVLW  28
0147:  MOVWF  2C
0148:  MOVLW  0C
0149:  MOVWF  2D
014A:  MOVLW  01
014B:  MOVWF  2E
014C:  MOVLW  06
014D:  MOVWF  2F
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
014E:  BCF    06.2
014F:  BSF    03.5
0150:  BCF    06.2
....................    lcd_output_rs(0); 
0151:  BCF    03.5
0152:  BCF    06.0
0153:  BSF    03.5
0154:  BCF    06.0
....................    lcd_output_rw(0); 
0155:  BCF    03.5
0156:  BCF    06.1
0157:  BSF    03.5
0158:  BCF    06.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0159:  BCF    06.3
....................    output_drive(LCD_DATA5); 
015A:  BCF    06.4
....................    output_drive(LCD_DATA6); 
015B:  BCF    06.5
....................    output_drive(LCD_DATA7); 
015C:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
015D:  BCF    06.2
....................    lcd_rs_tris(); 
015E:  BCF    06.0
....................    lcd_rw_tris(); 
015F:  BCF    06.1
....................  #endif 
....................      
....................    delay_ms(15); 
0160:  MOVLW  0F
0161:  BCF    03.5
0162:  MOVWF  3D
0163:  CALL   075
....................    for(i=1;i<=3;++i) 
0164:  MOVLW  01
0165:  MOVWF  2B
0166:  MOVF   2B,W
0167:  SUBLW  03
0168:  BTFSS  03.0
0169:  GOTO   172
....................    { 
....................        lcd_send_nibble(3); 
016A:  MOVLW  03
016B:  MOVWF  44
016C:  CALL   089
....................        delay_ms(5); 
016D:  MOVLW  05
016E:  MOVWF  3D
016F:  CALL   075
0170:  INCF   2B,F
0171:  GOTO   166
....................    } 
....................     
....................    lcd_send_nibble(2); 
0172:  MOVLW  02
0173:  MOVWF  44
0174:  CALL   089
....................    delay_ms(5); 
0175:  MOVLW  05
0176:  MOVWF  3D
0177:  CALL   075
....................    for(i=0;i<=3;++i) 
0178:  CLRF   2B
0179:  MOVF   2B,W
017A:  SUBLW  03
017B:  BTFSS  03.0
017C:  GOTO   189
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
017D:  MOVLW  2C
017E:  ADDWF  2B,W
017F:  MOVWF  04
0180:  BCF    03.7
0181:  MOVF   00,W
0182:  MOVWF  30
0183:  CLRF   41
0184:  MOVF   30,W
0185:  MOVWF  42
0186:  CALL   0E8
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0187:  INCF   2B,F
0188:  GOTO   179
0189:  GOTO   4B1 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
018A:  DECFSZ 3E,W
018B:  GOTO   18D
018C:  GOTO   190
....................       address=LCD_LINE_TWO; 
018D:  MOVLW  40
018E:  MOVWF  3F
018F:  GOTO   191
....................    else 
....................       address=0; 
0190:  CLRF   3F
....................       
....................    address+=x-1; 
0191:  MOVLW  01
0192:  SUBWF  3D,W
0193:  ADDWF  3F,F
....................    lcd_send_byte(0,0x80|address); 
0194:  MOVF   3F,W
0195:  IORLW  80
0196:  MOVWF  40
0197:  CLRF   41
0198:  MOVF   40,W
0199:  MOVWF  42
019A:  CALL   0E8
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
019B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
019C:  MOVF   3C,W
019D:  XORLW  07
019E:  BTFSC  03.2
019F:  GOTO   1AA
01A0:  XORLW  0B
01A1:  BTFSC  03.2
01A2:  GOTO   1AF
01A3:  XORLW  06
01A4:  BTFSC  03.2
01A5:  GOTO   1B7
01A6:  XORLW  02
01A7:  BTFSC  03.2
01A8:  GOTO   1BD
01A9:  GOTO   1C2
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01AA:  MOVLW  01
01AB:  MOVWF  3D
01AC:  MOVWF  3E
01AD:  CALL   18A
01AE:  GOTO   1C7
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01AF:  CLRF   41
01B0:  MOVLW  01
01B1:  MOVWF  42
01B2:  CALL   0E8
....................                      delay_ms(2); 
01B3:  MOVLW  02
01B4:  MOVWF  3D
01B5:  CALL   075
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01B6:  GOTO   1C7
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01B7:  MOVLW  01
01B8:  MOVWF  3D
01B9:  MOVLW  02
01BA:  MOVWF  3E
01BB:  CALL   18A
01BC:  GOTO   1C7
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01BD:  CLRF   41
01BE:  MOVLW  10
01BF:  MOVWF  42
01C0:  CALL   0E8
01C1:  GOTO   1C7
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01C2:  MOVLW  01
01C3:  MOVWF  41
01C4:  MOVF   3C,W
01C5:  MOVWF  42
01C6:  CALL   0E8
....................      #endif 
....................    } 
01C7:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #define holdButton PIN_A0 
....................  
.................... void main() { 
*
04A6:  MOVF   03,W
04A7:  ANDLW  1F
04A8:  MOVWF  03
04A9:  MOVLW  07
04AA:  MOVWF  1F
04AB:  BCF    03.7
....................    int cycles8, cycles; 
....................    long long freq; 
....................    long freqc_high; 
....................    long freqc_low; 
....................    set_tris_a(0x01); 
04AC:  MOVLW  01
04AD:  BSF    03.5
04AE:  MOVWF  05
....................    lcd_init(); 
04AF:  BCF    03.5
04B0:  GOTO   146
....................     
....................    printf(LCD_PUTC,"Sampling!!!!!!"); 
04B1:  CLRF   2B
04B2:  MOVF   2B,W
04B3:  CALL   004
04B4:  INCF   2B,F
04B5:  MOVWF  77
04B6:  MOVWF  3C
04B7:  CALL   19C
04B8:  MOVLW  0E
04B9:  SUBWF  2B,W
04BA:  BTFSS  03.2
04BB:  GOTO   4B2
....................    while (TRUE) { 
....................       cycles8=0; 
04BC:  CLRF   21
....................       cycles=0; 
04BD:  CLRF   22
....................       freqc_high=0; 
04BE:  CLRF   28
04BF:  CLRF   27
....................       t1_overflow=0; 
04C0:  BCF    0C.0
....................       set_timer1(0); 
04C1:  CLRF   0E
04C2:  CLRF   0F
04C3:  CLRF   0E
....................       setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1); 
04C4:  MOVLW  87
04C5:  MOVWF  10
.................... /* ___ wait one second ___  */ 
....................       while (cycles!=0xFF) { //true=3, false=4 
04C6:  INCFSZ 22,W
04C7:  GOTO   4C9
04C8:  GOTO   4E5
....................        cycles8=0; //1 cycle 
04C9:  CLRF   21
....................        //start inner loop 
....................        while (cycles8!=0xFF) { //true=3, false=4 
04CA:  INCFSZ 21,W
04CB:  GOTO   4CD
04CC:  GOTO   4DE
....................          if (t1_overflow)//true=2,false=3             //----| 
04CD:  BTFSS  0C.0
04CE:  GOTO   4D4
....................             {t1_overflow=0;freqc_high++;}//6 cycles   //    | 
04CF:  BCF    0C.0
04D0:  INCF   27,F
04D1:  BTFSC  03.2
04D2:  INCF   28,F
04D3:  GOTO   4D7
....................          else                                         //    |-- 8 cycles 
....................             {delay_cycles(5);}                        //----| 
04D4:  GOTO   4D5
04D5:  GOTO   4D6
04D6:  NOP
....................          delay_cycles(62); //x 
04D7:  MOVLW  14
04D8:  MOVWF  77
04D9:  DECFSZ 77,F
04DA:  GOTO   4D9
04DB:  NOP
....................          cycles8++; //1 
04DC:  INCF   21,F
04DD:  GOTO   4CA
....................  ///2 cycles to jump to top 
....................  //math: end inner loop 
....................  //math: total inner loop=((3+8+x+1+2)*255 + 4)*255 
....................  //math: if x=62.87781 then inner loops takes 5mil instructions 
....................  //math: if x=62 then inner loop takes 4942920, have to fill 57080 cycles 
....................   } 
....................  delay_cycles(216);      //y 
04DE:  MOVLW  47
04DF:  MOVWF  77
04E0:  DECFSZ 77,F
04E1:  GOTO   4E0
04E2:  GOTO   4E3
....................  cycles++;          ///1 cycle 
04E3:  INCF   22,F
04E4:  GOTO   4C6
....................  ///2 cylces to jump to top 
....................  //math: outer=(3+1+y+1+2)*255+4=57080 
....................  //math: y=(57080-4)/255)-(3+1+0+0+1+2) 
....................  //math: if y=216.827450980392156862745098039216 then outer loop cylces is 57080 
....................  //math: if y=216 then outer loop cycles is off by 211 cycles.  z=211 
.................... } 
....................       delay_cycles(211);   //z 
04E5:  MOVLW  46
04E6:  MOVWF  77
04E7:  DECFSZ 77,F
04E8:  GOTO   4E7
.................... /* ___ end waiting 1 second ___ */ 
....................       setup_timer_1(T1_DISABLED);    
04E9:  CLRF   10
....................       //turn of counter to prevent corruption while grabbing value 
....................       if (t1_overflow)             
04EA:  BTFSS  0C.0
04EB:  GOTO   4EF
....................       //check one last time for overflow 
....................           freqc_high++; 
04EC:  INCF   27,F
04ED:  BTFSC  03.2
04EE:  INCF   28,F
....................       freqc_low=get_timer1();       
04EF:  MOVF   0F,W
04F0:  MOVWF  7A
04F1:  MOVF   0E,W
04F2:  MOVWF  77
04F3:  MOVF   0F,W
04F4:  SUBWF  7A,W
04F5:  BTFSS  03.2
04F6:  GOTO   4EF
04F7:  MOVF   77,W
04F8:  MOVWF  29
04F9:  MOVF   7A,W
04FA:  MOVWF  2A
....................       //get timer1 value as the least sign. 16bits of freq counter 
....................       freq=make32(freqc_high,freqc_low);    
04FB:  MOVF   27,W
04FC:  MOVWF  25
04FD:  MOVF   28,W
04FE:  MOVWF  26
04FF:  MOVF   29,W
0500:  MOVWF  23
0501:  MOVF   2A,W
0502:  MOVWF  24
....................       //use new make32 function to join lsb and msb 
....................       //printf("%LU Hz\r\n",freq);       
....................       //and print frequency 
....................       lcd_gotoxy(1,1); 
0503:  MOVLW  01
0504:  MOVWF  3D
0505:  MOVWF  3E
0506:  CALL   18A
....................       printf(LCD_PUTC,"Frequence ="); 
0507:  CLRF   2B
0508:  MOVF   2B,W
0509:  CALL   017
050A:  INCF   2B,F
050B:  MOVWF  77
050C:  MOVWF  3C
050D:  CALL   19C
050E:  MOVLW  0B
050F:  SUBWF  2B,W
0510:  BTFSS  03.2
0511:  GOTO   508
....................       lcd_gotoxy(2,1); 
0512:  MOVLW  02
0513:  MOVWF  3D
0514:  MOVLW  01
0515:  MOVWF  3E
0516:  CALL   18A
....................        
....................       //float period; 
....................       if(freq==0){ 
0517:  MOVF   23,F
0518:  BTFSS  03.2
0519:  GOTO   52F
051A:  MOVF   24,F
051B:  BTFSS  03.2
051C:  GOTO   52F
051D:  MOVF   25,F
051E:  BTFSS  03.2
051F:  GOTO   52F
0520:  MOVF   26,F
0521:  BTFSS  03.2
0522:  GOTO   52F
....................          printf(LCD_PUTC,"Zero Signal"); 
0523:  CLRF   2B
0524:  MOVF   2B,W
0525:  CALL   027
0526:  INCF   2B,F
0527:  MOVWF  77
0528:  MOVWF  3C
0529:  CALL   19C
052A:  MOVLW  0B
052B:  SUBWF  2B,W
052C:  BTFSS  03.2
052D:  GOTO   524
....................          //printf(LCD_PUTC,"\nT: -------------"); 
....................           
....................       } 
052E:  GOTO   5FC
....................       else if(freq <100000)  { 
052F:  MOVF   26,F
0530:  BTFSS  03.2
0531:  GOTO   55D
0532:  MOVF   25,W
0533:  SUBLW  01
0534:  BTFSS  03.0
0535:  GOTO   55D
0536:  BTFSS  03.2
0537:  GOTO   542
0538:  MOVF   24,W
0539:  SUBLW  86
053A:  BTFSS  03.0
053B:  GOTO   55D
053C:  BTFSS  03.2
053D:  GOTO   542
053E:  MOVF   23,W
053F:  SUBLW  9F
0540:  BTFSS  03.0
0541:  GOTO   55D
....................          printf(LCD_PUTC," %LU Hz      ",freq); 
0542:  MOVLW  20
0543:  MOVWF  3C
0544:  CALL   19C
0545:  MOVLW  41
0546:  MOVWF  04
0547:  MOVF   26,W
0548:  MOVWF  2E
0549:  MOVF   25,W
054A:  MOVWF  2D
054B:  MOVF   24,W
054C:  MOVWF  2C
054D:  MOVF   23,W
054E:  MOVWF  2B
054F:  GOTO   217
0550:  MOVLW  04
0551:  MOVWF  2B
0552:  MOVF   2B,W
0553:  CALL   037
0554:  INCF   2B,F
0555:  MOVWF  77
0556:  MOVWF  3C
0557:  CALL   19C
0558:  MOVLW  0D
0559:  SUBWF  2B,W
055A:  BTFSS  03.2
055B:  GOTO   552
....................          /*period=1000.0/freq; 
....................          printf(LCD_PUTC,"\nT: %.6f mS  ",period); */ 
....................       } 
055C:  GOTO   5FC
....................       else if(freq > 1000000){ 
055D:  MOVF   26,F
055E:  BTFSS  03.2
055F:  GOTO   572
0560:  MOVF   25,W
0561:  SUBLW  0E
0562:  BTFSC  03.0
0563:  GOTO   5B7
0564:  XORLW  FF
0565:  BTFSS  03.2
0566:  GOTO   572
0567:  MOVF   24,W
0568:  SUBLW  41
0569:  BTFSC  03.0
056A:  GOTO   5B7
056B:  XORLW  FF
056C:  BTFSS  03.2
056D:  GOTO   572
056E:  MOVF   23,W
056F:  SUBLW  40
0570:  BTFSC  03.0
0571:  GOTO   5B7
....................          printf(LCD_PUTC," %3.3f kHz       ",(float)freq/1000.0); 
0572:  MOVF   26,W
0573:  MOVWF  2E
0574:  MOVF   25,W
0575:  MOVWF  2D
0576:  MOVF   24,W
0577:  MOVWF  2C
0578:  MOVF   23,W
0579:  MOVWF  2B
057A:  CALL   26E
057B:  MOVF   7A,W
057C:  MOVWF  2E
057D:  MOVF   79,W
057E:  MOVWF  2D
057F:  MOVF   78,W
0580:  MOVWF  2C
0581:  MOVF   77,W
0582:  MOVWF  2B
0583:  MOVF   2E,W
0584:  MOVWF  32
0585:  MOVF   2D,W
0586:  MOVWF  31
0587:  MOVF   2C,W
0588:  MOVWF  30
0589:  MOVF   2B,W
058A:  MOVWF  2F
058B:  CLRF   36
058C:  CLRF   35
058D:  MOVLW  7A
058E:  MOVWF  34
058F:  MOVLW  88
0590:  MOVWF  33
0591:  CALL   289
0592:  MOVF   7A,W
0593:  MOVWF  2E
0594:  MOVF   79,W
0595:  MOVWF  2D
0596:  MOVF   78,W
0597:  MOVWF  2C
0598:  MOVF   77,W
0599:  MOVWF  2B
059A:  MOVLW  20
059B:  MOVWF  3C
059C:  CALL   19C
059D:  MOVLW  89
059E:  MOVWF  04
059F:  MOVF   2E,W
05A0:  MOVWF  32
05A1:  MOVF   2D,W
05A2:  MOVWF  31
05A3:  MOVF   2C,W
05A4:  MOVWF  30
05A5:  MOVF   2B,W
05A6:  MOVWF  2F
05A7:  MOVLW  03
05A8:  MOVWF  33
05A9:  CALL   353
05AA:  MOVLW  06
05AB:  MOVWF  2F
05AC:  MOVF   2F,W
05AD:  CALL   049
05AE:  INCF   2F,F
05AF:  MOVWF  77
05B0:  MOVWF  3C
05B1:  CALL   19C
05B2:  MOVLW  11
05B3:  SUBWF  2F,W
05B4:  BTFSS  03.2
05B5:  GOTO   5AC
....................          /*period=1000.0/freq; 
....................          printf(LCD_PUTC,"\nT: %3.6f mS    ",period);*/ 
....................       } 
05B6:  GOTO   5FC
....................       else{ 
....................          printf(LCD_PUTC," %3.3f MHz       ",(float)freq/1000000.0); 
05B7:  MOVF   26,W
05B8:  MOVWF  2E
05B9:  MOVF   25,W
05BA:  MOVWF  2D
05BB:  MOVF   24,W
05BC:  MOVWF  2C
05BD:  MOVF   23,W
05BE:  MOVWF  2B
05BF:  CALL   26E
05C0:  MOVF   7A,W
05C1:  MOVWF  2E
05C2:  MOVF   79,W
05C3:  MOVWF  2D
05C4:  MOVF   78,W
05C5:  MOVWF  2C
05C6:  MOVF   77,W
05C7:  MOVWF  2B
05C8:  MOVF   2E,W
05C9:  MOVWF  32
05CA:  MOVF   2D,W
05CB:  MOVWF  31
05CC:  MOVF   2C,W
05CD:  MOVWF  30
05CE:  MOVF   2B,W
05CF:  MOVWF  2F
05D0:  CLRF   36
05D1:  MOVLW  24
05D2:  MOVWF  35
05D3:  MOVLW  74
05D4:  MOVWF  34
05D5:  MOVLW  92
05D6:  MOVWF  33
05D7:  CALL   289
05D8:  MOVF   7A,W
05D9:  MOVWF  2E
05DA:  MOVF   79,W
05DB:  MOVWF  2D
05DC:  MOVF   78,W
05DD:  MOVWF  2C
05DE:  MOVF   77,W
05DF:  MOVWF  2B
05E0:  MOVLW  20
05E1:  MOVWF  3C
05E2:  CALL   19C
05E3:  MOVLW  89
05E4:  MOVWF  04
05E5:  MOVF   2E,W
05E6:  MOVWF  32
05E7:  MOVF   2D,W
05E8:  MOVWF  31
05E9:  MOVF   2C,W
05EA:  MOVWF  30
05EB:  MOVF   2B,W
05EC:  MOVWF  2F
05ED:  MOVLW  03
05EE:  MOVWF  33
05EF:  CALL   353
05F0:  MOVLW  06
05F1:  MOVWF  2F
05F2:  MOVF   2F,W
05F3:  CALL   05F
05F4:  INCF   2F,F
05F5:  MOVWF  77
05F6:  MOVWF  3C
05F7:  CALL   19C
05F8:  MOVLW  11
05F9:  SUBWF  2F,W
05FA:  BTFSS  03.2
05FB:  GOTO   5F2
....................          /*period=1000000.0/freq; 
....................          printf(LCD_PUTC,"\nT: %.6f uS   ",period);*/ 
....................       } 
....................        
....................       while(input(holdButton)==0); 
05FC:  BSF    03.5
05FD:  BSF    05.0
05FE:  BCF    03.5
05FF:  BTFSS  05.0
0600:  GOTO   5FC
0601:  GOTO   4BC
....................    } 
.................... } 
0602:  SLEEP

Configuration Fuses:
   Word  1: 2162   NOWDT PUT HS MCLR BROWNOUT NOLVP NOCPD NOPROTECT
